
from __future__ import print_function

import sys
import unittest
import math
import numpy
from numpy import asfarray
from numpy import testing as NT
from numpy.testing import assert_array_almost_equal as assert_aequal

from .. import Machine

from .. import GLPSParser

import os
datadir = os.path.dirname(__file__)

def print_state(S):
  n = 7

  sys.stdout.write('\nmoment0_env:\n')
  sys.stdout.write('[')
  for i in range(n):
    sys.stdout.write('%23.16e' % (S.moment0_env[i]))
    if i != n-1: sys.stdout.write(', ')
  sys.stdout.write(']\n')

  sys.stdout.write('moment1_env:\n')
  for i in range(n):
    sys.stdout.write('[')
    for j in range(n):
      sys.stdout.write('%23.16e' % (S.moment1_env[i, j]))
      if j != n-1: sys.stdout.write(', ')
    if i != n-1:
      sys.stdout.write('],\n')
    else:
      sys.stdout.write(']\n')

      sys.stdout.write('IonEk:\n[')
      n1 = len(S.phis)
      for i in range(n1):
        sys.stdout.write('%23.16e' % (S.IonEk[i]))
        if i != n1-1: sys.stdout.write(', ')
      sys.stdout.write(']\n')

      sys.stdout.write('phis:\n[')
      n1 = len(S.phis)
      for i in range(n1):
        sys.stdout.write('%21.14e' % (S.phis[i]))
        if i != n1-1: sys.stdout.write(', ')
      sys.stdout.write(']\n')

class MomentTest(object):
    'Helper for testing moment2 sim'

    def assertConsistent(self, S, msg=None):
        'Check internal consistencies of a State'
        # check "cached" parameters calculated from energy
        self.assertEqual(S.ref_IonW,  S.ref_IonEs+S.ref_IonEk, msg)
        self.assertEqual(S.ref_gamma, S.ref_IonW/S.ref_IonEs, msg)
        self.assertEqual(S.ref_beta,  math.sqrt(1e0-1e0/(S.ref_gamma**2)), msg)
        self.assertEqual(S.ref_bg,    S.ref_beta*S.ref_gamma)

        assert_aequal(S.IonW,  S.IonEs+S.IonEk, err_msg=msg)
        assert_aequal(S.gamma, S.IonW/S.IonEs, err_msg=msg)
        assert_aequal(S.beta,  numpy.sqrt(1e0-1e0/numpy.square(S.gamma)), err_msg=msg)
        assert_aequal(S.bg,    S.beta*S.gamma, err_msg=msg)

        # moment0_env
        W = S.IonQ/S.IonQ.sum()
        W = W.reshape((1,len(W))).repeat(7,axis=0)
        M0env = (S.moment0*W).sum(axis=1)
        assert_aequal(S.moment0_env, M0env, err_msg=msg)

        # moment1_env
        Qs, M0, M0env, M1 = S.IonQ, S.moment0, S.moment0_env, S.moment1
        # using a loop because outer() doesn't understand axis=
        M1env  = numpy.zeros((7,7))
        for i in range(len(Qs)):
            Q = Qs[i]
            m0diff = M0[:,i]-M0env

            M1env[:7,:7] += Q*(M1[...,i]+numpy.outer(m0diff, m0diff))
        M1env /= Qs.sum()

        assert_aequal(S.moment1_env, M1env, err_msg=msg)

        # moment0_rms
        M0rms = numpy.sqrt(numpy.diagonal(S.moment1_env))
        assert_aequal(S.moment0_rms, M0rms, err_msg=msg)

    def assertStateEqual(self, expect, actual, msg=None, decimal=10):
        'Assert that two moment2 State instances are equal'
        for k,v in expect.items():
            #self.assertIn(k, actual, "%s %s missing"%(msg or "",k)) #TODO: make State iterable
            A = getattr(actual, k, None)
            if A is None:
                self.assertTrue(False, "%s %s missing"%(msg or "",k))
            if isinstance(v, numpy.ndarray):
                assert_aequal(v, getattr(actual, k), decimal=decimal, err_msg="%s %s doesn't match"%(msg or "",k))
            else:
                self.assertAlmostEqual(v, getattr(actual, k), places=decimal, msg="%s %s doesn't match"%(msg or "",k))


    def checkPropagate(self, elem, instate, outstate, max=1):
        '''Pass given input state through the named element

        Propagate the same input twice in succession to verify that element(s)
        give the same output.
        The repeat with 'transfer' caching disabled
        '''

        S1 = self.M.allocState(instate, inherit=False)
        S2 = self.M.allocState(instate, inherit=False)

        self.M.propagate(state=S1, start=elem, max=max)
        self.assertConsistent(S1)
        self.M.propagate(state=S2, start=elem, max=max)
        self.assertConsistent(S2)

#        print_state(S1)

        self.assertStateEqual(outstate, S1, 'first pass')
        self.assertStateEqual(outstate, S2, 'second pass') # fails if some Element has a caching problem...

        S1 = self.ICM.allocState(instate, inherit=False)
        S2 = self.ICM.allocState(instate, inherit=False)

        self.ICM.propagate(state=S1, start=elem, max=max)
        self.assertConsistent(S1)
        self.ICM.propagate(state=S2, start=elem, max=max)
        self.assertConsistent(S2)

        self.assertStateEqual(outstate, S1, 'third pass')
        self.assertStateEqual(outstate, S2, 'fourth pass')

class TestToStrl(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/to_strl.lat
    """
    lattice = 'to_strl.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_source(self):
        # S
        self.checkPropagate(0, {}, {
            'next_elem':1,
            'moment0':asfarray([
                [-7.8859999999999998e-04, 7.3126670000000001e-03],
                [1.0837100000000000e-05, 1.4765650000000000e-05],
                [1.3373430000000000e-02, 3.4498490000000001e-03],
                [6.6785340000000002e-06, -7.3976846899999996e-06],
                [-1.8477289999999999e-04, 2.2978860000000000e-02],
                [3.0999499999999998e-04, 2.0601000000000000e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [2.7784895409858517e+00, 2.4291087928314132e-04, -2.8819146985954898e-03, -1.3098890046625701e-05, 5.3594209519492754e-04, -1.7328482801286655e-05, 0.0000000000000000e+00],
                [2.4291087928314132e-04, 4.0675140732215713e-06, 9.1913901431043622e-06, -2.2427664519913498e-08, 3.5190231444234908e-07, -1.1570581361000062e-10, 0.0000000000000000e+00],
                [-2.8819146985954898e-03, 9.1913901431043622e-06, 2.5433968050163540e+00, 2.3922914294383500e-04, -8.7109112520915007e-04, -2.3018796435535812e-06, 0.0000000000000000e+00],
                [-1.3098890046625701e-05, -2.2427664519913498e-08, 2.3922914294383500e-04, 4.6600708350882344e-06, -8.7385463545847361e-07, 1.7247530507817648e-08, 0.0000000000000000e+00],
                [5.3594209519492754e-04, 3.5190231444234908e-07, -8.7109112520915007e-04, -8.7385463545847361e-07, 1.0267518939868806e-03, 1.0056757657182434e-05, 0.0000000000000000e+00],
                [-1.7328482801286655e-05, -1.1570581361000062e-10, -2.3018796435535812e-06, 1.7247530507817648e-08, 1.0056757657182434e-05, 2.6314343481397998e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.00000000000000000e+05,
            'ref_phis':0.00000000000000000e+00,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.0030999500000000e+05, 5.0206009999999998e+05]),
            'phis':asfarray([-1.8477289999999999e-04, 2.2978860000000000e-02]),
        }, max=1)

    def test_drift(self):
        # drift_1
        self.checkPropagate(0, {}, {
            'next_elem':2,
            'moment0':asfarray([
                [-8.3287999999999938e-06, 8.3757937999999997e-03],
                [1.0837100000000000e-05, 1.4765650000000000e-05],
                [1.3854284448000000e-02, 2.9172157023199998e-03],
                [6.6785340000000002e-06, -7.3976846899999996e-06],
                [-1.3325396829281771e-03, 1.5391130160821812e-02],
                [3.0999499999999998e-04, 2.0601000000000000e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [2.8345547005582050e+00, 5.3577189255509439e-04, -3.2795197045202571e-03, -1.4713681892059471e-05, 6.2542645808289041e-04, -1.7336813619866573e-05, 0.0000000000000000e+00],
                [5.3577189255509439e-04, 4.0675140732215713e-06, 7.5765982976705889e-06, -2.2427664519913498e-08, 3.5228427569447906e-07, -1.1570581361000062e-10, 0.0000000000000000e+00],
                [-3.2795197045202571e-03, 7.5765982976705889e-06, 2.6020036088093637e+00, 5.7475424307018780e-04, -9.3022235763712518e-04, -1.0600574469907109e-06, 0.0000000000000000e+00],
                [-1.4713681892059471e-05, -2.2427664519913498e-08, 5.7475424307018780e-04, 4.6600708350882344e-06, -9.3792991959628860e-07, 1.7247530507817648e-08, 0.0000000000000000e+00],
                [6.2542645808289041e-04, 3.5228427569447906e-07, -9.3022235763712475e-04, -9.3792991959628860e-07, 9.8879108725721874e-04, 3.4841141433569607e-07, 0.0000000000000000e+00],
                [-1.7336813619866573e-05, -1.1570581361000062e-10, -1.0600574469907109e-06, 1.7247530507817648e-08, 3.4841141433569607e-07, 2.6314343481397998e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.00000000000000000e+05,
            'ref_phis':3.70896240162486901e+00,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.0030999500000000e+05, 5.0206009999999998e+05]),
            'phis':asfarray([3.7076293281508645e+00, 3.7243300943218349e+00]),
        }, max=2)

    def test_rfcav_41(self):
        # ls1_ca01_cav1_d1127  cavtype = "0.041QWR"
        self.assertEqual(self.M.find(name='ls1_ca01_cav1_d1127')[0], 3)
        self.checkPropagate(0, {}, {
            'next_elem':4,
            'moment0':asfarray([
                [4.2806343239717116e-03, 1.5129972255810526e-02],
                [1.3170791010251590e-05, 2.6638715098587717e-05],
                [4.0306772693611600e-03, -1.4238677753316846e-02],
                [-1.6893666125019258e-04, -2.0313868893374049e-04],
                [-5.8199847180944175e-03, -2.8171535425187244e-02],
                [1.0937674260139465e-04, 3.2640186251401901e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [4.5737889068082804e+00, 6.0669648277006495e-03, -1.0792259945136952e-02, -3.1759168650761263e-05, 9.1002516920943549e-04, 3.0358922802964227e-05, 0.0000000000000000e+00],
                [6.0669648277006495e-03, 1.0279529425767875e-05, -1.0736164288211990e-05, -4.6551002950065074e-08, 1.0542984435954559e-06, 4.2234819235438213e-08, 0.0000000000000000e+00],
                [-1.0792259945136953e-02, -1.0736164288211994e-05, 4.4609155106701239e+00, 6.1807101898400177e-03, -1.1255393909196713e-03, -6.3650656953149896e-05, 0.0000000000000000e+00],
                [-3.1759168650761263e-05, -4.6551002950065080e-08, 6.1807101898400177e-03, 1.0961176841497697e-05, -1.8057731753519633e-06, -9.3605511068373278e-08, 0.0000000000000000e+00],
                [9.1002516920943570e-04, 1.0542984435954559e-06, -1.1255393909196708e-03, -1.8057731753519637e-06, 1.2760917189525325e-03, -4.6806127720643879e-08, 0.0000000000000000e+00],
                [3.0358922802964227e-05, 4.2234819235438213e-08, -6.3650656953149896e-05, -9.3605511068373278e-08, -4.6806127720648921e-08, 4.2230866648902030e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':2.27471719868534592e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([2.2741352002135365e+01, 2.2719000451428272e+01]),
        }, max=4)

    def test_rfcav_41_recalcttf(self):
        # ls1_ca01_cav1_d1127  cavtype = "0.041QWR"
        self.assertEqual(self.M.find(name='ls1_ca01_cav1_d1127')[0], 3)
        self.M.reconfigure(3, {'forcettfcalc':1.0})
        self.ICM.reconfigure(3, {'forcettfcalc':1.0})
        self.checkPropagate(0, {}, {
            'next_elem':4,
            'moment0_env':asfarray(
                [ 9.81245052404105e-03,  2.00474944555705e-05, -4.85925056656807e-03, -1.83712372016754e-04, -1.72231520708894e-02,  1.71879122109263e-03,  1.00000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 4.56978111860199e+00,  6.06523462170448e-03, -1.07862302961237e-02, -3.17725595594832e-05,  9.09605011212125e-04,  3.03125969710196e-05,  0.00000000000000e+00],
                [ 6.06523462170448e-03,  1.02839738079863e-05, -1.07352561610397e-05, -4.65886065788557e-08,  1.05430063236264e-06,  4.21997654070090e-08,  0.00000000000000e+00],
                [-1.07862302961237e-02, -1.07352561610397e-05,  4.45894182337220e+00,  6.18816091797052e-03, -1.12533711708629e-03, -6.35830908045431e-05,  0.00000000000000e+00],
                [-3.17725595594832e-05, -4.65886065788557e-08,  6.18816091797052e-03,  1.09867452299131e-05, -1.80852275365200e-06, -9.35806056450271e-08,  0.00000000000000e+00],
                [ 9.09605011212125e-04,  1.05430063236264e-06, -1.12533711708629e-03, -1.80852275365200e-06,  1.27614016515051e-03, -8.88103508147561e-08,  0.00000000000000e+00],
                [ 3.03125969710196e-05,  4.21997654070090e-08, -6.35830908045431e-05, -9.35806056450271e-08, -8.88103508147579e-08,  4.22170469127191e-06,  0.00000000000000e+00],
                [ 0.00000000000000e+00,  0.00000000000000e+00,  0.00000000000000e+00,  0.00000000000000e+00,  0.00000000000000e+00,  0.00000000000000e+00,  0.00000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':2.27471719868534592e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([2.2741352002135365e+01, 2.2719000451428272e+01]),
        }, max=4)

    def test_rfcav_41_freqjump(self):
        # ls1_ca01_cav1_d1127  cavtype = "0.041QWR"
        self.assertEqual(self.M.find(name='ls1_ca01_cav1_d1127')[0], 3)
        self.M.reconfigure(3, {'f':80.5e6*2})
        self.ICM.reconfigure(3, {'f':80.5e6*2})
        self.checkPropagate(0, {}, {
            'next_elem':4,
            'moment0_env':asfarray(
                [ 9.23476340417504e-03,   1.16130393104328e-05,  -1.13733923480535e-02,  -1.16463139538923e-04,  -1.54556012365671e-02,   1.25332763316725e-03,   1.00000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 3.95015891189972e+00,   1.56946688918091e-03,  -9.34683425682129e-03,  -2.15588075463666e-05,   1.02758798568787e-03,  -3.09737069608823e-05,   0.00000000000000e+00],
                [ 1.56946688918091e-03,   3.58119740029432e-06,   4.53682526349542e-07,  -1.96587254600711e-08,   1.76484930334541e-07,   5.84168278068051e-10,   0.00000000000000e+00],
                [-9.34683425682130e-03,   4.53682526349543e-07,   3.73696096620154e+00,   1.48963865566763e-03,  -1.24498078533978e-03,   1.92757984973395e-05,   0.00000000000000e+00],
                [-2.15588075463666e-05,  -1.96587254600711e-08,   1.48963865566763e-03,   3.87344019494948e-06,  -8.73531523761292e-07,   2.58756312242459e-08,   0.00000000000000e+00],
                [ 1.02758798568787e-03,   1.76484930334541e-07,  -1.24498078533978e-03,  -8.73531523761292e-07,   1.71310875699328e-03,  -7.12561927416625e-05,   0.00000000000000e+00],
                [-3.09737069608823e-05,   5.84168278068050e-10,   1.92757984973395e-05,   2.58756312242459e-08,  -7.12561927416625e-05,   4.28868380832865e-06,   0.00000000000000e+00],
                [ 0.00000000000000e+00,   0.00000000000000e+00,   0.00000000000000e+00,   0.00000000000000e+00,   0.00000000000000e+00,   0.00000000000000e+00,   0.00000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':4.96430974513769150e+05,
            'ref_phis':2.30746721871232269e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([4.9678558600735660e+05, 4.9854717546260360e+05]),
            'phis':asfarray([2.3067382607422269e+01, 2.3051376243683020e+01]),
        }, max=4)  

    def test_solenoid(self):
        # ls1_ca01_sol1_d1131_1
        self.checkPropagate(0, {}, {
            'next_elem':9,
            'moment0':asfarray([
                [-7.5976405161956887e-03, -4.2033140434120323e-03],
                [-3.8191576548473962e-05, -4.3132441823442950e-05],
                [-4.3990633733480659e-02, -7.3762251080284197e-02],
                [-1.1896171910899926e-04, -1.1594740503684112e-04],
                [-7.2514286712388474e-03, -7.0526029188607994e-02],
                [1.0937674260139465e-04, 3.2640186251401901e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [8.0532835805828107e+00, -1.1996773374006241e-03, -1.2076556960799312e-02, 7.8260918480707844e-05, 4.4722636729343661e-04, 7.7455375507305819e-06, 0.0000000000000000e+00],
                [-1.1996773374006249e-03, 1.4386139131164235e-06, 9.9286883345759832e-05, -3.4739396768956866e-09, -2.5932535513055464e-07, -3.8185010164746997e-09, 0.0000000000000000e+00],
                [-1.2076556960799720e-02, 9.9286883345759859e-05, 8.0927099123362876e+00, -9.7902740600577039e-04, -6.4020082997541831e-04, -9.4677007214414072e-05, 0.0000000000000000e+00],
                [7.8260918480708129e-05, -3.4739396768954240e-09, -9.7902740600577104e-04, 1.4431734180561974e-06, -4.0226350811848745e-08, 1.6715286131978529e-08, 0.0000000000000000e+00],
                [4.4722636729343661e-04, -2.5932535513055506e-07, -6.4020082997541809e-04, -4.0226350811849354e-08, 1.9877692143781063e-03, -5.4891187320312006e-05, 0.0000000000000000e+00],
                [7.7455375507305819e-06, -3.8185010164747047e-09, -9.4677007214414072e-05, 1.6715286131978532e-08, -5.4891187320312006e-05, 4.2230866648902030e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':3.72527602222924656e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([3.7245508581428005e+01, 3.7182047005562815e+01]),
        }, max=9)

    def test_orbtrim(self):
        # ls1_ca01_dch_d1131_2
        self.checkPropagate(0, {}, {
            'next_elem':10,
            'moment0':asfarray([
                [-7.5976405161956887e-03, -4.2033140434120323e-03],
                [-3.8191576548473962e-05, -4.3132441823442950e-05],
                [-4.3990633733480659e-02, -7.3762251080284197e-02],
                [-1.1896171910899926e-04, -1.1594740503684112e-04],
                [-7.2514286712388474e-03, -7.0526029188607994e-02],
                [1.0937674260139465e-04, 3.2640186251401901e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [8.0532835805828107e+00, -1.1996773374006241e-03, -1.2076556960799312e-02, 7.8260918480707844e-05, 4.4722636729343661e-04, 7.7455375507305819e-06, 0.0000000000000000e+00],
                [-1.1996773374006249e-03, 1.4386139131164235e-06, 9.9286883345759832e-05, -3.4739396768956866e-09, -2.5932535513055464e-07, -3.8185010164746997e-09, 0.0000000000000000e+00],
                [-1.2076556960799720e-02, 9.9286883345759859e-05, 8.0927099123362876e+00, -9.7902740600577039e-04, -6.4020082997541831e-04, -9.4677007214414072e-05, 0.0000000000000000e+00],
                [7.8260918480708129e-05, -3.4739396768954240e-09, -9.7902740600577104e-04, 1.4431734180561974e-06, -4.0226350811848745e-08, 1.6715286131978529e-08, 0.0000000000000000e+00],
                [4.4722636729343661e-04, -2.5932535513055506e-07, -6.4020082997541809e-04, -4.0226350811849354e-08, 1.9877692143781063e-03, -5.4891187320312006e-05, 0.0000000000000000e+00],
                [7.7455375507305819e-06, -3.8185010164747047e-09, -9.4677007214414072e-05, 1.6715286131978532e-08, -5.4891187320312006e-05, 4.2230866648902030e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':3.72527602222924656e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([3.7245508581428005e+01, 3.7182047005562815e+01]),
        }, max=10)

    def test_rfcav_85(self):
        # ls1_cb01_cav1_d1229   cavtype = "0.085QWR"
        self.checkPropagate(0, {}, {
            'next_elem':111,
            'moment0':asfarray([
                [-9.2092486714458882e-02, -9.5109642827502588e-02],
                [-1.3105735293467079e-04, -1.1608711099978083e-04],
                [-1.9484591817550864e-01, -3.8870633931256954e-01],
                [-9.9447130316402624e-04, -1.2403529628537498e-03],
                [-4.0115261066375751e-03, -5.8515727071721813e-02],
                [-3.0021119713783265e-05, 1.2157901312112808e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [3.5741635753180123e+00, 3.9046681137197832e-03, 2.6319553840627891e-01, 1.8850927362115799e-04, -3.3171353330492835e-04, -2.5463826946468120e-05, 0.0000000000000000e+00],
                [3.9046681137197823e-03, 5.3877451153407533e-06, 2.4814486532540096e-04, 1.4838700828255012e-07, -7.1082274147998101e-07, -1.1436375794765219e-08, 0.0000000000000000e+00],
                [2.6319553840627863e-01, 2.4814486532539977e-04, 3.6460516525020283e+00, 3.2992822533457681e-03, 2.4128455790737779e-03, -6.4746360829532031e-05, 0.0000000000000000e+00],
                [1.8850927362115767e-04, 1.4838700828254943e-07, 3.2992822533457712e-03, 4.0807404978435368e-06, 3.2058212902021959e-06, -3.8424368637017261e-08, 0.0000000000000000e+00],
                [-3.3171353330492851e-04, -7.1082274147998122e-07, 2.4128455790737779e-03, 3.2058212902021959e-06, 1.2103473040189110e-03, 1.1651738942551201e-05, 0.0000000000000000e+00],
                [-2.5463826946468174e-05, -1.1436375794765263e-08, -6.4746360829532004e-05, -3.8424368637017215e-08, 1.1651738942551201e-05, 5.4283844065607908e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.55668759019720554e+06,
            'ref_phis':4.08528048413382066e+02,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.5566575690774918e+06, 1.5579033803284168e+06]),
            'phis':asfarray([4.0852403688727543e+02, 4.0846953268631034e+02]),
        }, max=111)

    def test_quadrupole(self):
        # ls1_bts_qh_d1942
        self.checkPropagate(0, {}, {
            'next_elem':698,
            'moment0':asfarray([
                [1.6518697624310787e+00, 2.7465986883888260e+00],
                [2.5706431384792785e-03, 4.1545963654015137e-03],
                [4.0700288848744337e-01, 7.2041253026041652e-01],
                [1.9919057911409795e-04, -5.7309891259008029e-04],
                [1.3744866376284842e-03, -3.6237441821191506e-02],
                [9.2651004457473753e-04, -1.1550990681052208e-02],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [2.9112671746098280e+00, 4.3634419121115330e-03, 2.2706243347497276e-01, -4.8249852319736053e-04, -1.0221104295852119e-02, -3.5342038702283508e-03, 0.0000000000000000e+00],
                [4.3634419121115330e-03, 6.6698566950406241e-06, 3.4073808752117470e-04, -7.2120764899806356e-07, -1.4794010504038732e-05, -5.0989015093586048e-06, 0.0000000000000000e+00],
                [2.2706243347496924e-01, 3.4073808752116917e-04, 1.3314803328814580e+00, -1.8941670139741432e-03, -2.9206161602146419e-03, -9.8817258354454780e-04, 0.0000000000000000e+00],
                [-4.8249852319735500e-04, -7.2120764899805498e-07, -1.8941670139741421e-03, 3.0434962764341258e-06, 7.1940692080750577e-06, 2.4835020532319970e-06, 0.0000000000000000e+00],
                [-1.0221104295852119e-02, -1.4794010504038732e-05, -2.9206161602146419e-03, 7.1940692080750577e-06, 4.4492782545155570e-04, 8.1421698425609385e-05, 0.0000000000000000e+00],
                [-3.5342038702283508e-03, -5.0989015093586048e-06, -9.8817258354454780e-04, 2.4835020532319970e-06, 8.1421698425609412e-05, 8.1344632397553512e-05, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.70909455949932337e+07,
            'ref_phis':1.34071143197342781e+03,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.7091872105037808e+07, 1.7079394604312181e+07]),
            'phis':asfarray([1.3407128064371002e+03, 1.3406751909577081e+03]),
        }, max=698)

    def test_sbend(self):
        # fs1_css_dh_d2163_1
        self.checkPropagate(0, {}, {
            'next_elem':831,
            'moment0':asfarray([
                [-1.5865573966477584e+00, -1.7754059343854718e+00],
                [-6.0591045431052245e-04, 8.8237913360813386e-04],
                [-1.0622850793777925e+00, -2.2224145201536563e+00],
                [-7.4661842888722847e-04, -7.8544844580338878e-04],
                [-2.1005970310237474e-03, 2.1435685817553798e-02],
                [-4.7275870454311373e-04, -3.0837818125486376e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [1.7289456693386280e+00, 2.6671946342639790e-04, 1.5225241352473709e-01, -5.5867646567394790e-05, -1.5792405815256813e-03, 3.4344208786011831e-05, 0.0000000000000000e+00],
                [2.6671946342639953e-04, 8.8232084038094344e-07, -5.4049940764587924e-04, -5.3701103992733429e-08, 8.6683922816058201e-06, -9.8867507880591307e-07, 0.0000000000000000e+00],
                [1.5225241352473254e-01, -5.4049940764588108e-04, 3.1222535733063781e+00, 2.9140374831102266e-04, -6.8708500270531605e-03, 7.3814984343682235e-04, 0.0000000000000000e+00],
                [-5.5867646567395028e-05, -5.3701103992733892e-08, 2.9140374831102282e-04, 1.7019622036482040e-07, -6.9809042619394385e-08, 9.5400072773355987e-08, 0.0000000000000000e+00],
                [-1.5792405815256818e-03, 8.6683922816058201e-06, -6.8708500270531648e-03, -6.9809042619395907e-08, 6.3726044042289852e-04, 2.3522916789161689e-04, 0.0000000000000000e+00],
                [3.4344208786011885e-05, -9.8867507880591328e-07, 7.3814984343682040e-04, 9.5400072773355325e-08, 2.3522916789161684e-04, 1.3367141782219324e-04, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.70904122181179523e+07,
            'ref_phis':1.53615528707064072e+03,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.7089939459413409e+07, 1.7087328436305404e+07]),
            'phis':asfarray([1.5361531936818110e+03, 1.5361767697235473e+03]),
        }, max=831)

    def test_stripper(self):
        # fs1_strl_strip_d2237_164
        self.checkPropagate(0, {}, {
            'next_elem':900,
            'moment0':asfarray([
                [4.6749567010907561e-01, 4.6749567010907561e-01, 4.6749567010907561e-01, 4.6749567010907561e-01, 4.6749567010907561e-01],
                [1.2113930056098126e-03, 1.2113930056098126e-03, 1.2113930056098126e-03, 1.2113930056098126e-03, 1.2113930056098126e-03],
                [5.2104255904010432e-01, 5.2104255904010432e-01, 5.2104255904010432e-01, 5.2104255904010432e-01, 5.2104255904010432e-01],
                [1.9674837289707500e-03, 1.9674837289707500e-03, 1.9674837289707500e-03, 1.9674837289707500e-03, 1.9674837289707500e-03],
                [1.4005839632760015e-02, 1.4005839632760015e-02, 1.4005839632760015e-02, 1.4005839632760015e-02, 1.4005839632760015e-02],
                [-1.8048333266924292e-03, -1.8048333266924292e-03, -1.8048333266924292e-03, -1.8048333266924292e-03, -1.8048333266924292e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [3.3653776496589494e-01, -1.6829019681278046e-04, 1.9685479546533488e-01, 1.2774315224989253e-04, 5.5880677618230529e-03, -1.4541808752175616e-03, 0.0000000000000000e+00],
                [-1.6829019681277656e-04, 3.3139287412073686e-06, -3.2022788783932785e-04, -4.6217927894420309e-07, -1.2443479317307242e-05, 3.4478264093524176e-06, 0.0000000000000000e+00],
                [1.9685479546533508e-01, -3.2022788783933034e-04, 6.5957834862296516e-01, 5.9299115331502535e-04, 5.6053942646653206e-03, -1.5054887136346970e-03, 0.0000000000000000e+00],
                [1.2774315224989261e-04, -4.6217927894420722e-07, 5.9299115331502633e-04, 1.3431813343491579e-06, 3.6505921498720145e-06, -1.5118132391627560e-06, 0.0000000000000000e+00],
                [5.5880677618230547e-03, -1.2443479317307242e-05, 5.6053942646653206e-03, 3.6505921498720154e-06, 2.5237357663397599e-04, -6.2637257139908884e-05, 0.0000000000000000e+00],
                [-1.4541808752175618e-03, 3.4478264093524185e-06, -1.5054887136346949e-03, -1.5118132391627497e-06, -6.2637257139909060e-05, 1.5110136285821935e-03, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':3.27731092436974791e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.68179689629510567e+07,
            'ref_phis':1.60247306661264474e+03,
            'IonQ':asfarray([7.9002307424607190e-02, 1.5381232421040111e-01, 2.1641311669788110e-01, 2.2004784042027173e-01, 1.6169318952751824e-01]),
            'IonZ':asfarray([3.1932773109243695e-01, 3.2352941176470590e-01, 3.2773109243697479e-01, 3.3193277310924368e-01, 3.3613445378151263e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.6816154257186070e+07, 1.6816154257186070e+07, 1.6816154257186070e+07, 1.6816154257186070e+07, 1.6816154257186070e+07]),
            'phis':asfarray([1.6024876226120175e+03, 1.6024876226120175e+03, 1.6024876226120175e+03, 1.6024876226120175e+03, 1.6024876226120175e+03]),
        }, max=900)

    def test_final(self):
        # drift_731
        self.checkPropagate(0, {}, {
            'next_elem':1261,
            'moment0':asfarray([
                [3.2752324903939476e+00, 7.9323199827029345e-01, 2.4542847691389164e-01, 8.5120019023150184e-01, 1.7722507370857767e+00],
                [1.6264522694091343e-05, 2.7789620083513316e-04, 5.9165354820591212e-04, 5.8842006627411172e-04, -2.8797803464812588e-05],
                [4.1342421125781934e+00, 3.3239310318176911e+00, 2.0474921010368550e+00, 4.6558298596067493e-01, -1.1449605800902167e+00],
                [1.7246971381804149e-03, 7.8355459447256503e-04, -1.0064228720065320e-04, -7.5761373176970036e-04, -1.0369379612908958e-03],
                [-9.4985514425141287e-03, -1.5621140160672901e-02, -1.8682976488176017e-02, -1.9398288282542687e-02, -1.8406069778085052e-02],
                [1.2795575776934624e-02, 8.0260431766510005e-07, -6.4433416377305984e-03, -6.5814209195375444e-03, -4.9201205158233639e-04],
                [1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [4.3986359286685692e+00, -1.0616512564411207e-04, 1.4411487760532447e-02, -3.0296029746518797e-04, -1.8869234689389777e-02, 2.0393230824193947e-03, 0.0000000000000000e+00],
                [-1.0616512564410646e-04, 4.9570504270871294e-07, 3.0901853375970802e-04, 3.9626728990002779e-08, 8.2462663320219011e-07, -9.8476930605853497e-07, 0.0000000000000000e+00],
                [1.4411487760546743e-02, 3.0901853375970933e-04, 6.5727958189542557e+00, 2.7540054815483423e-03, 7.7069472865761175e-03, 5.2455475777312436e-03, 0.0000000000000000e+00],
                [-3.0296029746518401e-04, 3.9626728990002541e-08, 2.7540054815483623e-03, 1.8784036222075744e-06, 9.3079770177480779e-06, 4.3760834645229290e-06, 0.0000000000000000e+00],
                [-1.8869234689389842e-02, 8.2462663320217804e-07, 7.7069472865760550e-03, 9.3079770177480830e-06, 5.0800488893909404e-04, 5.1394909319065743e-04, 0.0000000000000000e+00],
                [2.0393230824193782e-03, -9.8476930605853349e-07, 5.2455475777311708e-03, 4.3760834645229281e-06, 5.1394909319065754e-04, 1.3051561248199675e-03, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':3.27731092436974791e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.68169511919587851e+07,
            'ref_phis':2.02365128719019913e+03,
            'IonQ':asfarray([7.9002307424607190e-02, 1.5381232421040111e-01, 2.1641311669788110e-01, 2.2004784042027173e-01, 1.6169318952751824e-01]),
            'IonZ':asfarray([3.1932773109243695e-01, 3.2352941176470590e-01, 3.2773109243697479e-01, 3.3193277310924368e-01, 3.3613445378151263e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.6829746767735720e+07, 1.6816951994563103e+07, 1.6810507850321054e+07, 1.6810369771039248e+07, 1.6816459179907203e+07]),
            'phis':asfarray([2.0236417753279932e+03, 2.0236356660500376e+03, 2.0236326008320109e+03, 2.0236318853736768e+03, 2.0236328811007140e+03]),
        }, max=-1)

class TestToChgStrErr(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/to_chg_str_err.lat
    """
    lattice = 'to_chg_str_err.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_source(self):
        # S
        self.checkPropagate(0, {}, {
            'next_elem':1,
            'moment0':asfarray([
                [-7.8859999999999998e-04, 7.3126670000000001e-03],
                [1.0837100000000000e-05, 1.4765650000000000e-05],
                [1.3373430000000000e-02, 3.4498490000000001e-03],
                [6.6785340000000002e-06, -7.3976846899999996e-06],
                [-1.8477289999999999e-04, 2.2978860000000000e-02],
                [3.0999499999999998e-04, 2.0601000000000000e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [2.7784895409858517e+00, 2.4291087928314132e-04, -2.8819146985954898e-03, -1.3098890046625701e-05, 5.3594209519492754e-04, -1.7328482801286655e-05, 0.0000000000000000e+00],
                [2.4291087928314132e-04, 4.0675140732215713e-06, 9.1913901431043622e-06, -2.2427664519913498e-08, 3.5190231444234908e-07, -1.1570581361000062e-10, 0.0000000000000000e+00],
                [-2.8819146985954898e-03, 9.1913901431043622e-06, 2.5433968050163540e+00, 2.3922914294383500e-04, -8.7109112520915007e-04, -2.3018796435535812e-06, 0.0000000000000000e+00],
                [-1.3098890046625701e-05, -2.2427664519913498e-08, 2.3922914294383500e-04, 4.6600708350882344e-06, -8.7385463545847361e-07, 1.7247530507817648e-08, 0.0000000000000000e+00],
                [5.3594209519492754e-04, 3.5190231444234908e-07, -8.7109112520915007e-04, -8.7385463545847361e-07, 1.0267518939868806e-03, 1.0056757657182434e-05, 0.0000000000000000e+00],
                [-1.7328482801286655e-05, -1.1570581361000062e-10, -2.3018796435535812e-06, 1.7247530507817648e-08, 1.0056757657182434e-05, 2.6314343481397998e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.00000000000000000e+05,
            'ref_phis':0.00000000000000000e+00,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.0030999500000000e+05, 5.0206009999999998e+05]),
            'phis':asfarray([-1.8477289999999999e-04, 2.2978860000000000e-02]),
        }, max=1)

    def test_drift(self):
        # dt0000_1
        self.checkPropagate(0, {}, {
            'next_elem':2,
            'moment0':asfarray([
                [-8.3287999999999938e-06, 8.3757937999999997e-03],
                [1.0837100000000000e-05, 1.4765650000000000e-05],
                [1.3854284448000000e-02, 2.9172157023199998e-03],
                [6.6785340000000002e-06, -7.3976846899999996e-06],
                [-1.3325396829281771e-03, 1.5391130160821812e-02],
                [3.0999499999999998e-04, 2.0601000000000000e-03],
                [1.0000000000000000e+00, 1.0000000000000000e+00],
            ]),
            'moment1_env':asfarray([
                [2.8345547005582050e+00, 5.3577189255509439e-04, -3.2795197045202571e-03, -1.4713681892059471e-05, 6.2542645808289041e-04, -1.7336813619866573e-05, 0.0000000000000000e+00],
                [5.3577189255509439e-04, 4.0675140732215713e-06, 7.5765982976705889e-06, -2.2427664519913498e-08, 3.5228427569447906e-07, -1.1570581361000062e-10, 0.0000000000000000e+00],
                [-3.2795197045202571e-03, 7.5765982976705889e-06, 2.6020036088093637e+00, 5.7475424307018780e-04, -9.3022235763712518e-04, -1.0600574469907109e-06, 0.0000000000000000e+00],
                [-1.4713681892059471e-05, -2.2427664519913498e-08, 5.7475424307018780e-04, 4.6600708350882344e-06, -9.3792991959628860e-07, 1.7247530507817648e-08, 0.0000000000000000e+00],
                [6.2542645808289041e-04, 3.5228427569447906e-07, -9.3022235763712475e-04, -9.3792991959628860e-07, 9.8879108725721874e-04, 3.4841141433569607e-07, 0.0000000000000000e+00],
                [-1.7336813619866573e-05, -1.1570581361000062e-10, -1.0600574469907109e-06, 1.7247530507817648e-08, 3.4841141433569607e-07, 2.6314343481397998e-06, 0.0000000000000000e+00],
                [0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00],
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.00000000000000000e+05,
            'ref_phis':3.70896240162486901e+00,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.0030999500000000e+05, 5.0206009999999998e+05]),
            'phis':asfarray([3.7076293281508645e+00, 3.7243300943218349e+00]),
        }, max=2)

    def test_rfcavity_1(self):
        # cvy000_1
        self.checkPropagate(0, {}, {
            'next_elem':4,
            'moment0_env':asfarray(
                [ 6.824167366925e-03,  1.285720200078e-05,  2.026545127971e-02,  2.060503069060e-05, -1.722450191079e-02,  1.720795513224e-03,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 4.573767947152e+00,  6.066861262079e-03, -1.076228511696e-02, -3.160398715322e-05,  8.225315468883e-04,  4.501969939850e-05,  0.000000000000e+00],
                [ 6.066861262079e-03,  1.027931388113e-05, -1.059361307883e-05, -4.620568096986e-08,  8.799365969204e-07,  5.841160257777e-08,  0.000000000000e+00],
                [-1.076228511696e-02, -1.059361307883e-05,  4.460871520289e+00,  6.180489502897e-03, -1.020804597973e-03, -8.093625822940e-05,  0.000000000000e+00],
                [-3.160398715322e-05, -4.620568096986e-08,  6.180489502897e-03,  1.096060195875e-05, -1.619834258984e-06, -1.089397187769e-07,  0.000000000000e+00],
                [ 8.225315468883e-04,  8.799365969204e-07, -1.020804597973e-03, -1.619834258984e-06,  1.276034984175e-03, -4.313194835179e-08,  0.000000000000e+00],
                [ 4.501969939850e-05,  5.841160257777e-08, -8.093625822940e-05, -1.089397187769e-07, -4.313194835179e-08,  4.223871859477e-06,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':2.27471719868534592e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([2.2741352002135365e+01, 2.2719000451428272e+01]),
        }, max=4)

    def test_solenoid(self):
        # sol000_1
        self.checkPropagate(0, {}, {
            'next_elem':9,
            'moment0_env':asfarray(
                [-5.403407831574e-01, -4.679516802339e-04, -1.014701530340e-01, -3.666417566581e-03, -4.688367261927e-02,  1.716758619053e-03,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 6.906682657401e+00, -9.864581754138e-03,  2.866328481529e-02,  8.505171563906e-05,  4.602861857582e-04, -1.760750919916e-04,  0.000000000000e+00],
                [-9.864581754138e-03,  1.559884146926e-05,  1.050986967333e-04, -2.811218919179e-07,  2.903870652832e-07,  2.168675652397e-07,  0.000000000000e+00],
                [ 2.866328481529e-02,  1.050986967333e-04,  6.952369596962e+00, -9.871613741865e-03, -1.761579698513e-03, -6.539730899912e-05,  0.000000000000e+00],
                [ 8.505171563905e-05, -2.811218919179e-07, -9.871613741865e-03,  1.555896319853e-05,  3.690559834002e-06,  4.614922625351e-08,  0.000000000000e+00],
                [ 4.602861857582e-04,  2.903870652832e-07, -1.761579698513e-03,  3.690559834002e-06,  2.549850671288e-03, -7.338315224912e-05,  0.000000000000e+00],
                [-1.760750919916e-04,  2.168675652397e-07, -6.539730899912e-05,  4.614922625351e-08, -7.338315224912e-05,  4.226211027531e-06,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':5.53528799277067184e+05,
            'ref_phis':4.21488968817265572e+01,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([5.5363817601966858e+05, 5.5679281790220737e+05]),
            'phis':asfarray([4.2141162007502089e+01, 4.2063824379319684e+01]),
        }, max=9)

    def test_rfcavity_2(self):
        # cvy000_13
        self.checkPropagate(0, {}, {
            'next_elem':92,
            'moment0_env':asfarray(
                [ 5.244075606833e+00,  5.620602469155e-03,  1.175357591124e+01,  1.741392898648e-02, -3.142536510765e-02,  5.563465422444e-04,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 5.776330052363e+00,  6.316367570595e-03, -2.646000369393e+00, -3.602380402960e-03,  4.038137292541e-02, -9.565934570156e-04,  0.000000000000e+00],
                [ 6.316367570595e-03,  8.029076102785e-06, -2.940513152512e-03, -4.006511747141e-06,  4.616068540626e-05, -8.085462309318e-07,  0.000000000000e+00],
                [-2.646000369393e+00, -2.940513152512e-03,  7.477277149431e+00,  8.294386656220e-03, -5.279110531114e-02,  1.218201079803e-03,  0.000000000000e+00],
                [-3.602380402960e-03, -4.006511747141e-06,  8.294386656220e-03,  1.059408472507e-05, -6.941546725017e-05,  1.485484913757e-06,  0.000000000000e+00],
                [ 4.038137292541e-02,  4.616068540626e-05, -5.279110531114e-02, -6.941546725017e-05,  1.214463773277e-03,  1.201110650592e-05,  0.000000000000e+00],
                [-9.565934570156e-04, -8.085462309318e-07,  1.218201079803e-03,  1.485484913757e-06,  1.201110650592e-05,  5.489403915016e-06,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.55668759019720554e+06,
            'ref_phis':4.08528048413382010e+02,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.5566575690774918e+06, 1.5579033803284168e+06]),
            'phis':asfarray([4.0852403688727543e+02, 4.0846953268631029e+02]),
        }, max=92)

    def test_sbend(self):
        # dipo00_1
        self.checkPropagate(0, {}, {
            'next_elem':706,
            'moment0_env':asfarray(
                [-3.574424838285e+00,  2.849052042392e-03, -4.181017644713e+00, -3.120368794688e-03,  1.024010910292e-02, -1.868998110775e-03,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 1.695492880035e+01,  4.976629737359e-03, -4.733410591182e+01, -1.044314924727e-02,  4.384620309124e-02, -5.133260327236e-03,  0.000000000000e+00],
                [ 4.976629737359e-03,  1.742373637227e-06, -1.455501776499e-02, -3.202510629834e-06,  1.317352526159e-05, -1.694357218707e-06,  0.000000000000e+00],
                [-4.733410591182e+01, -1.455501776499e-02,  1.504384665140e+02,  3.261197696089e-02, -1.378402849285e-01,  1.551332126515e-02,  0.000000000000e+00],
                [-1.044314924727e-02, -3.202510629834e-06,  3.261197696089e-02,  7.249664851752e-06, -2.975571993880e-05,  3.678226967012e-06,  0.000000000000e+00],
                [ 4.384620309124e-02,  1.317352526159e-05, -1.378402849285e-01, -2.975571993880e-05,  6.276311253987e-04,  2.368877240248e-04,  0.000000000000e+00],
                [-5.133260327236e-03, -1.694357218707e-06,  1.551332126515e-02,  3.678226967012e-06,  2.368877240248e-04,  1.348823168320e-04,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':1.38655462184873957e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.70904122181179523e+07,
            'ref_phis':1.53615526921439141e+03,
            'IonQ':asfarray([1.0111000000000000e+04, 1.0531000000000000e+04]),
            'IonZ':asfarray([1.3865546218487396e-01, 1.4285714285714285e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.7089939459636927e+07, 1.7087328433456421e+07]),
            'phis':asfarray([ 1.53615411673838e+03,  1.53617645281424e+03]),
        }, max=706)

    def test_stripper(self):
        # str000_94
        self.checkPropagate(0, {}, {
            'next_elem':792,
            'moment0_env':asfarray(
                [ 1.281667401284e+00, -3.349334355471e-03,  1.394867070273e+00,  7.583930774470e-03,  1.446043658519e-02, -2.249712198169e-03,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 2.728741913944e+00,  7.221334735464e-03, -8.162990084851e+00, -1.412134940950e-02, -2.498951658818e-02,  9.818769692759e-03,  0.000000000000e+00],
                [ 7.221334735464e-03,  2.245553165276e-05, -2.307856484449e-02, -3.995586369500e-05, -7.022502657499e-05,  2.744760888494e-05,  0.000000000000e+00],
                [-8.162990084851e+00, -2.307856484449e-02,  2.727655635676e+01,  4.654834552444e-02,  8.105941155244e-02, -2.962336610198e-02,  0.000000000000e+00],
                [-1.412134940950e-02, -3.995586369500e-05,  4.654834552444e-02,  8.050661944688e-05,  1.398131900262e-04, -5.313190918787e-05,  0.000000000000e+00],
                [-2.498951658818e-02, -7.022502657499e-05,  8.105941155244e-02,  1.398131900262e-04,  2.704961694009e-04, -9.225567859225e-05,  0.000000000000e+00],
                [ 9.818769692759e-03,  2.744760888494e-05, -2.962336610198e-02, -5.313190918787e-05, -9.225567859225e-05,  1.513634647421e-03,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':3.27731092436974791e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.68179689629510567e+07,
            'ref_phis':1.60247304875639520e+03,
            'IonQ':asfarray([7.9002307414477640e-02, 1.5381232419909729e-01, 2.1641311669311883e-01, 2.2004784042604530e-01, 1.6169318953903708e-01]),
            'IonZ':asfarray([3.1932773109243695e-01, 3.2352941176470590e-01, 3.2773109243697479e-01, 3.3193277310924368e-01, 3.3613445378151263e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([1.6816154255834728e+07, 1.6816154255834728e+07, 1.6816154255834728e+07, 1.6816154255834728e+07, 1.6816154255834728e+07]),
            'phis':asfarray([ 1.602487624444e+03,  1.602487624444e+03,  1.602487624444e+03,  1.602487624444e+03,  1.602487624444e+03]),
        }, max=792)

    def test_final(self):
        # dt0000_732
        self.checkPropagate(0, {}, {
            'next_elem':1197,
            'moment0_env':asfarray(
                [ 6.062163226264e+00,  9.379042169213e-04,  1.068329693579e+00, -2.266299780753e-03, -1.808716451112e-02, -2.213471795362e-03,  1.000000000000e+00]
            ),
            'moment1_env':asfarray([
                [ 1.344242368958e+01,  4.149049505774e-03,  3.558339993449e+01,  1.914598955786e-02,  3.779195194725e-03, -7.259508519046e-03,  0.000000000000e+00],
                [ 4.149049505774e-03,  4.523344953218e-06,  5.005890436029e-03,  1.132848952809e-05, -2.631643732059e-06, -1.440825695037e-05,  0.000000000000e+00],
                [ 3.558339993449e+01,  5.005890436028e-03,  1.455894576136e+02,  5.049808383677e-02,  2.082458317759e-02,  6.370711364216e-03,  0.000000000000e+00],
                [ 1.914598955786e-02,  1.132848952809e-05,  5.049808383677e-02,  4.502749130185e-05, -4.598205878889e-06, -3.571718556235e-05,  0.000000000000e+00],
                [ 3.779195194726e-03, -2.631643732059e-06,  2.082458317759e-02, -4.598205878889e-06,  2.283289434033e-04,  4.909391551361e-04,  0.000000000000e+00],
                [-7.259508519046e-03, -1.440825695037e-05,  6.370711364216e-03, -3.571718556235e-05,  4.909391551361e-04,  1.334819940630e-03,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
            'ref_IonQ':1.01110000000000000e+04,
            'ref_IonZ':3.27731092436974791e-01,
            'ref_IonEs':9.31494320000000000e+08,
            'ref_IonEk':1.68169511919587851e+07,
            'ref_phis':2.02365131432644284e+03,
            'IonQ':asfarray([7.9002307414477640e-02, 1.5381232419909729e-01, 2.1641311669311883e-01, 2.2004784042604530e-01, 1.6169318953903708e-01]),
            'IonZ':asfarray([3.1932773109243695e-01, 3.2352941176470590e-01, 3.2773109243697479e-01, 3.3193277310924368e-01, 3.3613445378151263e-01]),
            'IonEs':asfarray([9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08, 9.3149432000000000e+08]),
            'IonEk':asfarray([ 1.6827008470306516e+07,  1.6815581927310467e+07,  1.6810282897642374e+07,  1.6811097237228751e+07,  1.6817999072074175e+07]),
            'phis':asfarray([ 2.02364023206067e+03,  2.02363472977970e+03,  2.02363209270414e+03,  2.02363166993400e+03,  2.02363286058958e+03]),
        }, max=-1)


class TestLS1(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/LS1.lat
    """
    lattice = 'LS1.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_emit_growth(self):
        "Test of emittance growth from RF Cavity."

        self.checkPropagate(0, {}, {
            'moment0_env':
                asfarray([ 1.092386843735e+00,  3.572872382745e-04,  1.442050056156e+00, -1.195977257483e-04, -1.737858326093e-02, -2.299969255442e-03,  1.000000000000e+00]),
            'moment1_env':asfarray([
                [ 4.399592141508e+00, -1.061065224973e-04,  1.442483427109e-02, -3.029997547792e-04, -1.886943428012e-02,  2.038719906716e-03,  0.000000000000e+00],
                [-1.061065224973e-04,  4.958826196847e-07,  3.090168078132e-04,  3.962333178269e-08,  8.245954729543e-07, -9.847556293971e-07,  0.000000000000e+00],
                [ 1.442483427110e-02,  3.090168078131e-04,  6.574427936089e+00,  2.754603734956e-03,  7.707049759694e-03,  5.245764724897e-03,  0.000000000000e+00],
                [-3.029997547792e-04,  3.962333178269e-08,  2.754603734956e-03,  1.878914620076e-06,  9.308073429378e-06,  4.376310089076e-06,  0.000000000000e+00],
                [-1.886943428012e-02,  8.245954729543e-07,  7.707049759693e-03,  9.308073429378e-06,  5.080187761560e-04,  5.139586577118e-04,  0.000000000000e+00],
                [ 2.038719906716e-03, -9.847556293971e-07,  5.245764724897e-03,  4.376310089076e-06,  5.139586577118e-04,  1.305180933464e-03,  0.000000000000e+00],
                [ 0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00,  0.000000000000e+00]
            ]),
        }, max=-1)


class TestFE(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/LS1.lat
    """
    lattice = 'FE_latticeE.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_FE(self):
        "Test of Front End."

        self.checkPropagate(0, {}, {
            'moment0_env':
                asfarray([-8.49762481072278e+00,  5.18007440037213e-02, -6.06062877459902e+01,  2.59765883514659e-01, -3.90228543782396e+02,  1.21498924974542e-03,  1.00000000000000e+00]),
            'moment1_env':asfarray([
                [ 1.7525965523152655e+02, -1.5947399230415265e+00,  1.0173245924004422e+03, -7.7918347157872345e+00,  7.0964724952438555e+03, -2.1061260545138308e-02,  0.0000000000000000e+00],
                [-1.5947399230415313e+00,  2.0297627836803469e-02, -7.3951153746535878e+00,  8.7167164043037065e-02, -6.1621498789325251e+01,  1.7093991870577186e-04,  0.0000000000000000e+00],
                [ 1.0173245924004435e+03, -7.3951153746536047e+00,  6.7551428565001661e+03, -4.0767637521805469e+01,  4.3486718921223830e+04, -1.3337138926108441e-01,  0.0000000000000000e+00],
                [-7.7918347157872541e+00,  8.7167164043037079e-02, -4.0767637521805469e+01,  3.9605321813434385e-01, -3.1180907878509856e+02,  8.9269118598357493e-04,  0.0000000000000000e+00],
                [ 7.0964724952438601e+03, -6.1621498789325322e+01,  4.3486718921223845e+04, -3.1180907878509873e+02,  2.9623055724159628e+05, -8.8757815373919524e-01,  0.0000000000000000e+00],
                [-2.1061260545138315e-02,  1.7093991870577150e-04, -1.3337138926108427e-01,  8.9269118598357341e-04, -8.8757815373919491e-01,  2.6850001065988695e-06,  0.0000000000000000e+00],
                [ 0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00]
            ])
        }, max=-1)
        
class TestGenCavi(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/LS1.lat
    """
    lattice = 'LS1_Gen.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_caviGen(self):
        "Test of LS1_Gen.lat End."

        self.checkPropagate(0, {}, {
            'moment0_env':
                asfarray([-6.0300982819e-02,  3.9413380699e-04,  1.6534075570e+00,  2.0865006952e-04,  2.9674962640e-03,  5.2905826468e-03,  1.0000000000e+00]),
            'moment1_env':asfarray([
                [ 3.5241453419e+00, -2.8291147760e-04, -2.4485924056e-01, -1.0452562023e-04,  1.0653345242e-03,  3.7210686149e-03,  0.0000000000e+00],
                [-2.8291147760e-04,  5.4392179491e-07, -1.7269951458e-04, -1.4381863710e-07, -1.0259317269e-06, -1.8215819390e-06,  0.0000000000e+00],
                [-2.4485924056e-01, -1.7269951458e-04,  3.6810047505e+00,  1.5610062846e-03,  2.3255312999e-03,  1.8578334391e-03,  0.0000000000e+00],
                [-1.0452562023e-04, -1.4381863710e-07,  1.5610062846e-03,  1.2143615397e-06,  1.6439601002e-06,  1.8549543185e-06,  0.0000000000e+00],
                [ 1.0653345242e-03, -1.0259317269e-06,  2.3255312999e-03,  1.6439601002e-06,  3.4934118288e-04,  6.3400166738e-04,  0.0000000000e+00],
                [ 3.7210686149e-03, -1.8215819390e-06,  1.8578334391e-03,  1.8549543185e-06,  6.3400166738e-04,  1.3238205642e-03,  0.0000000000e+00],
                [ 0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00]
            ])
        }, max=-1)
        
class TestGenCavi2(unittest.TestCase, MomentTest):
    """Strategy is to test the state after the first instance of each element type.

    $ ./tools/flame -N <element_name> \
       -F utest,next_elem,moment0,moment1_env,ref_IonQ,ref_IonZ,ref_IonEs,ref_IonEk,ref_phis,IonQ,IonZ,IonEs,IonEk,phis \
       python/flame/test/LS1.lat
    """
    lattice = 'LS2_Gen.lat'

    def setUp(self):
        with open(os.path.join(datadir, self.lattice), 'rb') as F:
            self.M = Machine(F)
            F.seek(0)
            self.ICM = Machine(F, extra={'skipcache':1.0})

    def test_caviGen2(self):
        "Test of LS2_Gen.lat End."

        self.checkPropagate(0, {}, {
            'moment0_env':
                asfarray([1.5047496359e-01,  1.0937387433e-05, -7.1566489296e-01, -3.3312224764e-05, -8.6038192098e-04,  6.5961353752e-03,  1.0000000000e+00]),
            'moment1_env':asfarray([
                [ 1.1093596776e+00,  7.5075468052e-05, -1.5016142757e-01, -1.9399746742e-06, -6.1536054919e-04,  1.1441323650e-03,  0.0000000000e+00],
                [ 7.5075468052e-05,  5.2699815090e-08, -1.7583175560e-05,  1.7896596263e-09,  2.8932541916e-07, -4.1090450706e-07,  0.0000000000e+00],
                [-1.5016142757e-01, -1.7583175560e-05,  1.3163647390e+00,  1.1673820682e-04, -1.1091901143e-03, -9.8718601791e-04,  0.0000000000e+00],
                [-1.9399746742e-06,  1.7896596263e-09,  1.1673820682e-04,  6.6470984333e-08, -1.0209268035e-06,  4.2912014144e-07,  0.0000000000e+00],
                [-6.1536054919e-04,  2.8932541916e-07, -1.1091901143e-03, -1.0209268035e-06,  1.2883724935e-04, -1.0053124464e-04,  0.0000000000e+00],
                [ 1.1441323650e-03, -4.1090450706e-07, -9.8718601791e-04,  4.2912014144e-07, -1.0053124464e-04,  5.6963252348e-03,  0.0000000000e+00],
                [ 0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00,  0.0000000000e+00]
            ])
        }, max=-1)